/*!
\file   LCD_16x2_Library.h
\date   2022-03-09
\author Milthon F Caicedo mfcaicedo@unicauca.edu.co,
 * Yazmin Gutierrez yavigutierrez@unicauca.edu.co, 
 * Erika Camacho erikalcamacho@unicauca.edu.co, 
 * Brandon Nicolas Bohórquez, bbohorquez@unicauca.edu.co 

\brief  Proyecto HelpTrafficLight.

\par Copyright
Information contained here in is proprietary to aforementioned authors and
is subject to restrictions on use and disclosure.

\par
Copyright (c) unicauca 2022. All rights reserved.
******************************************************************************
*/
/*==========================================================================================================
 ===========================================================================================================*/
#ifndef LCD_16x2_H
#define	LCD_16x2_H
/*==========================================================================================================
 ===========================================================================================================*/
#include <xc.h>
//LCD Functions Developed by electroSome
#define _XTAL_FREQ 8000000
#define TRIS_LCD    TRISB           // Asignamos el nombre "TRIS_LCD" al registro TRISD
#define RS RB2
#define EN RB3
#define D4 RB4
#define D5 RB5
#define D6 RB6
#define D7 RB7

/*F**************************************************************************
* NAME: Lcd_Port
*----------------------------------------------------------------------------
* PARAMS:
* a: entrada de datos
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that assigns values ??to ports
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void Lcd_Port(char a)
{
   if(a & 1)
      D4 = 1;
   else
      D4 = 0;

   if(a & 2)
      D5 = 1;
   else
      D5 = 0;

   if(a & 4)
      D6 = 1;
   else
      D6 = 0;

   if(a & 8)
      D7 = 1;
   else
      D7 = 0;
}
/*F**************************************************************************
* NAME: Lcd_Cmd
*----------------------------------------------------------------------------
* PARAMS:
* a: entrada de datos
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that configures the RS and EN ports
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void Lcd_Cmd(char a)
{
   RS = 0;             // => RS = 0
   Lcd_Port(a);
   EN  = 1;             // => E = 1
        __delay_ms(4);
        EN  = 0;             // => E = 0
}
/*F**************************************************************************
* NAME: lcd_clear
*----------------------------------------------------------------------------
* PARAMS:
* none
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that clear the screen.
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_clear()
{
   Lcd_Cmd(0);
   Lcd_Cmd(1);
}
/*F**************************************************************************
* NAME: lcd_gotoxy
*----------------------------------------------------------------------------
* PARAMS:
* a: posición en la abscisa x.
* b: posición en la ordenada y.
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that positions the cursor to write on the screen.
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_gotoxy(char a, char b)
{
   char temp,z,y;
   if(a == 1)
   {
     temp = 0x80 + b - 1;
      z = temp>>4;
      y = temp & 0x0F;
      Lcd_Cmd(z);
      Lcd_Cmd(y);
   }
   else if(a == 2)
   {
      temp = 0xC0 + b - 1;
      z = temp>>4;
      y = temp & 0x0F;
      Lcd_Cmd(z);
      Lcd_Cmd(y);
   }
}
/*F**************************************************************************
* NAME: lcd_init
*----------------------------------------------------------------------------
* PARAMS:
* none
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that initializes the LCD
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_init()
{
  TRIS_LCD=0x00;                      // Configuramos el registro TRISX asignamos a la pantalla LCD como salida.
  Lcd_Port(0x00);
   __delay_ms(20);
  Lcd_Cmd(0x03);
   __delay_ms(5);
  Lcd_Cmd(0x03);
   __delay_ms(11);
  Lcd_Cmd(0x03);
  Lcd_Cmd(0x02);
  Lcd_Cmd(0x02);
  Lcd_Cmd(0x08);
  Lcd_Cmd(0x00);
  Lcd_Cmd(0x0C);
  Lcd_Cmd(0x00);
  Lcd_Cmd(0x06);
}
/*F**************************************************************************
* NAME: lcd_write_char
*----------------------------------------------------------------------------
* PARAMS:
* a: entrada de datos
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that writes characters to the screen
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_write_char(char a)
{
   char temp,y;
   temp = a&0x0F;
   y = a&0xF0;
   RS = 1;             // => RS = 1
   Lcd_Port(y>>4);             //Data transfer
   EN = 1;
   __delay_us(40);
   EN = 0;
   Lcd_Port(temp);
   EN = 1;
   __delay_us(40);
   EN = 0;
}
/*F**************************************************************************
* NAME: lcd_putc
*----------------------------------------------------------------------------
* PARAMS:
* a: puntero de datos como entrada
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that writes characters chains to the screen using a pointer 
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_putc(char *a)
{
   int i;
   for(i=0;a[i]!='\0';i++)
      lcd_write_char(a[i]);
}
/*F**************************************************************************
* NAME: lcd_shift_right
*----------------------------------------------------------------------------
* PARAMS:
* none
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that shift to the right 
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_shift_right()
{
   Lcd_Cmd(0x01);
   Lcd_Cmd(0x0C);
}
/*F**************************************************************************
* NAME: lcd_shift_left
*----------------------------------------------------------------------------
* PARAMS:
* none
* return:   none
*----------------------------------------------------------------------------
* PURPOSE:
* Method that shift to the left  
*----------------------------------------------------------------------------
* NOTE:
* 
*****************************************************************************/
void lcd_shift_left()
{
   Lcd_Cmd(0x01);
   Lcd_Cmd(0x08);
}

/*==========================================================================================================
 ===========================================================================================================*/
#endif	/* LCD_16x2_H */

